{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { graphql, buildSchema } from \"graphql\";\nimport { ContentfulService } from '../../core/contentful';\nvar schema = buildSchema(\"\\ntype Author {\\n    fullName: String,\\n    avatar: String\\n}\\ntype Article {\\n    id: String,\\n    title: String,         \\n    author: Author,\\n    description: String,\\n    image: String,\\n    publishedAt: String\\n}\\ntype Query {\\n    articles: [Article],\\n    article(id:String): Article\\n  }\\n\");\nvar root = {\n  articles: function articles() {\n    var contentfulService, _await$contentfulServ, entries;\n\n    return _regeneratorRuntime.async(function articles$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            contentfulService = new ContentfulService();\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(contentfulService.getPostEntries());\n\n          case 3:\n            _await$contentfulServ = _context.sent;\n            entries = _await$contentfulServ.entries;\n            return _context.abrupt(\"return\", entries);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  article: function article(id) {\n    var contentfulService, entries;\n    return _regeneratorRuntime.async(function article$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            contentfulService = new ContentfulService();\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(contentfulService.getPostById(id));\n\n          case 3:\n            entries = _context2.sent;\n            return _context2.abrupt(\"return\", entries);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexport default (function _callee(req, res) {\n  var query, response;\n  return _regeneratorRuntime.async(function _callee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          query = req.body.query;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(graphql(schema, query, root));\n\n        case 3:\n          response = _context3.sent;\n          return _context3.abrupt(\"return\", res.end(JSON.stringify(response)));\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});","map":null,"metadata":{},"sourceType":"module"}