{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { graphql, buildSchema } from \"graphql\";\nimport { ContentfulService } from '../../core/contentful';\nvar schema = buildSchema(\"\\ntype Author {\\n    fullName: String,\\n    avatar: String\\n}\\ntype Article {\\n    id: String,\\n    title: String,         \\n    author: Author,\\n    description: String,\\n    image: String,\\n    publishedAt: String\\n}\\ntype Query {\\n    articles: [Article],\\n    article(id:String): Article\\n  }\\n\");\nvar root = {\n  articles: function articles() {\n    var contentfulService, _await$contentfulServ, entries;\n\n    return _regeneratorRuntime.async(function articles$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            contentfulService = new ContentfulService();\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(contentfulService.getPostEntries());\n\n          case 3:\n            _await$contentfulServ = _context.sent;\n            entries = _await$contentfulServ.entries;\n            return _context.abrupt(\"return\", entries);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  article: function article(id) {\n    var contentfulService, entries;\n    return _regeneratorRuntime.async(function article$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            contentfulService = new ContentfulService();\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(contentfulService.getPostById(id));\n\n          case 3:\n            entries = _context2.sent;\n            return _context2.abrupt(\"return\", entries);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexport default (function _callee(req, res) {\n  var query, response;\n  return _regeneratorRuntime.async(function _callee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          query = req.body.query;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(graphql(schema, query, root));\n\n        case 3:\n          response = _context3.sent;\n          return _context3.abrupt(\"return\", res.end(JSON.stringify(response)));\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});","map":{"version":3,"sources":["C:/Users/M1059011/Desktop/Tasks/modern-web-articles/pages/api/graphql.js"],"names":["graphql","buildSchema","ContentfulService","schema","root","articles","contentfulService","getPostEntries","entries","article","id","getPostById","req","res","query","body","response","end","JSON","stringify"],"mappings":";AAAA,SAASA,OAAT,EAAkBC,WAAlB,QAAqC,SAArC;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AAEA,IAAMC,MAAM,GAAGF,WAAW,8SAA1B;AAmBA,IAAMG,IAAI,GAAG;AACTC,EAAAA,QAAQ,EAAE;AAAA;;AAAA;AAAA;AAAA;AAAA;AACAC,YAAAA,iBADA,GACoB,IAAIJ,iBAAJ,EADpB;AAAA;AAAA,6CAEoBI,iBAAiB,CAACC,cAAlB,EAFpB;;AAAA;AAAA;AAEEC,YAAAA,OAFF,yBAEEA,OAFF;AAAA,6CAGCA,OAHD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADD;AAMTC,EAAAA,OAAO,EAAE,iBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACCJ,YAAAA,iBADD,GACqB,IAAIJ,iBAAJ,EADrB;AAAA;AAAA,6CAEiBI,iBAAiB,CAACK,WAAlB,CAA8BD,EAA9B,CAFjB;;AAAA;AAECF,YAAAA,OAFD;AAAA,8CAGEA,OAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA,CAAb;AAaA,gBAAe,iBAAOI,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,UAAAA,KADO,GACCF,GAAG,CAACG,IAAJ,CAASD,KADV;AAAA;AAAA,2CAEUd,OAAO,CAACG,MAAD,EAASW,KAAT,EAAgBV,IAAhB,CAFjB;;AAAA;AAEPY,UAAAA,QAFO;AAAA,4CAINH,GAAG,CAACI,GAAJ,CAAQC,IAAI,CAACC,SAAL,CAAeH,QAAf,CAAR,CAJM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import { graphql, buildSchema } from \"graphql\";\r\nimport { ContentfulService } from '../../core/contentful';\r\n\r\nconst schema = buildSchema(`\r\ntype Author {\r\n    fullName: String,\r\n    avatar: String\r\n}\r\ntype Article {\r\n    id: String,\r\n    title: String,         \r\n    author: Author,\r\n    description: String,\r\n    image: String,\r\n    publishedAt: String\r\n}\r\ntype Query {\r\n    articles: [Article],\r\n    article(id:String): Article\r\n  }\r\n`);\r\n\r\nconst root = { \r\n    articles: async () =>{\r\n        const contentfulService = new ContentfulService();\r\n        const { entries } = await contentfulService.getPostEntries();\r\n        return entries;\r\n    },\r\n    article: async (id) =>{\r\n        const contentfulService = new ContentfulService();\r\n        const entries = await contentfulService.getPostById(id);\r\n        return entries;\r\n    }\r\n};\r\n\r\nexport default async (req, res) => {\r\n  const query = req.body.query;\r\n  const response = await graphql(schema, query, root);\r\n\r\n  return res.end(JSON.stringify(response));\r\n};"]},"metadata":{},"sourceType":"module"}