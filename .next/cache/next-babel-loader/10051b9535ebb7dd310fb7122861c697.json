{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { createClient } from 'contentful';\nexport var CONTENT_TYPE_POST = 'post';\nexport var CONTENT_TYPE_PERSON = 'author';\nexport var CONTENT_TYPE_BANNER = 'banner';\nvar query = \"{\\n  post {\\n    items {\\n      title\\n    }\\n  }\\n}\";\nvar Space = process.env.CONTENTFUL_SPACE_ID;\nvar Token = process.env.CONTENTFUL_ACCESS_TOKEN;\nexport var ContentfulService = /*#__PURE__*/function () {\n  function ContentfulService() {\n    _classCallCheck(this, ContentfulService);\n  }\n\n  _createClass(ContentfulService, [{\n    key: \"createClientInstance\",\n    value: function createClientInstance() {\n      return createClient({\n        space: Space,\n        accessToken: Token\n      });\n    }\n  }, {\n    key: \"fetchPostById\",\n    value: function fetchPostById(sysId) {\n      var client;\n      return _regeneratorRuntime.async(function fetchPostById$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              client = this.createClientInstance();\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(client.getEntries({\n                content_type: CONTENT_TYPE_POST,\n                'sys.id': sysId\n              }));\n\n            case 3:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getBannerEntries\",\n    value: function getBannerEntries() {\n      var client, contents, entries;\n      return _regeneratorRuntime.async(function getBannerEntries$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              client = this.createClientInstance();\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(client.getEntries({\n                content_type: CONTENT_TYPE_BANNER\n              }));\n\n            case 4:\n              contents = _context2.sent;\n              entries = contents.items.map(function (_ref) {\n                var fields = _ref.fields;\n                return {\n                  bannerImage: fields.bannerImage.fields.file.url\n                };\n              });\n              return _context2.abrupt(\"return\", {\n                entries: entries\n              });\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](0);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[0, 9]], Promise);\n    } // async restFetch(){\n    //   fetch(`https://graphql.contentful.com/content/v1/spaces/${Space}`,{\n    //     method:\"POST\",\n    //     headers : {\n    //       \"content-type\":\"application/json\",\n    //       authorization:`Bearer ${Token}`\n    //     },\n    //     body: JSON.stringify({\n    //       query\n    //     })\n    //   }).then(res =>res.json())\n    //   .then(response=>{\n    //     console.log(response)\n    //   })\n    // }\n\n  }, {\n    key: \"getPostEntries\",\n    value: function getPostEntries() {\n      var _ref2,\n          limit,\n          skip,\n          tag,\n          client,\n          contents,\n          entries,\n          total,\n          _args3 = arguments;\n\n      return _regeneratorRuntime.async(function getPostEntries$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _ref2 = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {\n                limit: 5,\n                skip: 0,\n                tag: ''\n              }, limit = _ref2.limit, skip = _ref2.skip, tag = _ref2.tag;\n              _context3.prev = 1;\n              client = this.createClientInstance();\n              _context3.next = 5;\n              return _regeneratorRuntime.awrap(client.getEntries({\n                // include: 1,\n                // limit,\n                // skip,\n                // 'sys.id': tag,\n                content_type: CONTENT_TYPE_POST // order: 'fields.publishDate',\n\n              }));\n\n            case 5:\n              contents = _context3.sent;\n              entries = contents.items.map(function (_ref3) {\n                var sys = _ref3.sys,\n                    fields = _ref3.fields;\n                return {\n                  id: sys.id,\n                  title: fields.title,\n                  author: {\n                    fullName: fields.author.fields.fullName,\n                    avatar: fields.author.fields.avatar.fields.file.url\n                  },\n                  description: fields.description,\n                  image: fields.image.fields.file.url,\n                  publishedAt: fields.publishDate\n                };\n              });\n              total = contents.total;\n              return _context3.abrupt(\"return\", {\n                entries: entries,\n                total: total,\n                limit: limit,\n                skip: skip\n              });\n\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](1);\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, [[1, 11]], Promise);\n    }\n  }, {\n    key: \"getPostById\",\n    value: function getPostById(postId) {\n      var content, entry;\n      return _regeneratorRuntime.async(function getPostById$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return _regeneratorRuntime.awrap(this.fetchPostById(postId));\n\n            case 3:\n              content = _context4.sent;\n              entry = content.items[0];\n              return _context4.abrupt(\"return\", {\n                id: entry.sys.id,\n                title: entry.fields.title,\n                author: {\n                  fullName: entry.fields.author.fields.fullName,\n                  avatar: entry.fields.author.fields.avatar.fields.file.url\n                },\n                description: entry.fields.description,\n                image: entry.fields.image.fields.file.url,\n                publishedAt: entry.fields.publishDate\n              });\n\n            case 8:\n              _context4.prev = 8;\n              _context4.t0 = _context4[\"catch\"](0);\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, [[0, 8]], Promise);\n    }\n  }]);\n\n  return ContentfulService;\n}();","map":null,"metadata":{},"sourceType":"module"}