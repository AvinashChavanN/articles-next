{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { createClient } from 'contentful';\nexport var CONTENT_TYPE_POST = 'post';\nexport var CONTENT_TYPE_PERSON = 'author';\nexport var CONTENT_TYPE_BANNER = 'banner';\nvar query = \"{\\n  post {\\n    items {\\n      title\\n    }\\n  }\\n}\";\nvar Space = process.env.CONTENTFUL_SPACE_ID;\nvar Token = process.env.CONTENTFUL_ACCESS_TOKEN;\nexport var ContentfulService = /*#__PURE__*/function () {\n  function ContentfulService() {\n    _classCallCheck(this, ContentfulService);\n  }\n\n  _createClass(ContentfulService, [{\n    key: \"createClientInstance\",\n    value: function createClientInstance() {\n      return createClient({\n        space: Space,\n        accessToken: Token\n      });\n    }\n  }, {\n    key: \"fetchPostById\",\n    value: function fetchPostById(sysId) {\n      var client;\n      return _regeneratorRuntime.async(function fetchPostById$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              client = this.createClientInstance();\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(client.getEntries({\n                content_type: CONTENT_TYPE_POST,\n                'sys.id': sysId\n              }));\n\n            case 3:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getBannerEntries\",\n    value: function getBannerEntries() {\n      var client, contents, entries;\n      return _regeneratorRuntime.async(function getBannerEntries$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              client = this.createClientInstance();\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(client.getEntries({\n                content_type: CONTENT_TYPE_BANNER\n              }));\n\n            case 4:\n              contents = _context2.sent;\n              entries = contents.items.map(function (_ref) {\n                var fields = _ref.fields;\n                return {\n                  bannerImage: fields.bannerImage.fields.file.url\n                };\n              });\n              return _context2.abrupt(\"return\", {\n                entries: entries\n              });\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](0);\n              // TODO: add error handling\n              console.log(_context2.t0);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[0, 9]], Promise);\n    } // async restFetch(){\n    //   fetch(`https://graphql.contentful.com/content/v1/spaces/${Space}`,{\n    //     method:\"POST\",\n    //     headers : {\n    //       \"content-type\":\"application/json\",\n    //       authorization:`Bearer ${Token}`\n    //     },\n    //     body: JSON.stringify({\n    //       query\n    //     })\n    //   }).then(res =>res.json())\n    //   .then(response=>{\n    //     console.log(response)\n    //   })\n    // }\n\n  }, {\n    key: \"getPostEntries\",\n    value: function getPostEntries() {\n      var _ref2,\n          limit,\n          skip,\n          tag,\n          client,\n          contents,\n          entries,\n          total,\n          _args3 = arguments;\n\n      return _regeneratorRuntime.async(function getPostEntries$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _ref2 = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {\n                limit: 5,\n                skip: 0,\n                tag: ''\n              }, limit = _ref2.limit, skip = _ref2.skip, tag = _ref2.tag;\n              _context3.prev = 1;\n              client = this.createClientInstance();\n              _context3.next = 5;\n              return _regeneratorRuntime.awrap(client.getEntries({\n                // include: 1,\n                // limit,\n                // skip,\n                // 'sys.id': tag,\n                content_type: CONTENT_TYPE_POST // order: 'fields.publishDate',\n\n              }));\n\n            case 5:\n              contents = _context3.sent;\n              entries = contents.items.map(function (_ref3) {\n                var sys = _ref3.sys,\n                    fields = _ref3.fields;\n                return {\n                  id: sys.id,\n                  title: fields.title,\n                  author: {\n                    fullName: fields.author.fields.fullName,\n                    avatar: fields.author.fields.avatar.fields.file.url\n                  },\n                  description: fields.description,\n                  image: fields.image.fields.file.url,\n                  publishedAt: fields.publishDate\n                };\n              });\n              total = contents.total;\n              return _context3.abrupt(\"return\", {\n                entries: entries,\n                total: total,\n                limit: limit,\n                skip: skip\n              });\n\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](1);\n              // TODO: add error handling\n              console.log(_context3.t0);\n\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, [[1, 11]], Promise);\n    }\n  }, {\n    key: \"getPostById\",\n    value: function getPostById(postId) {\n      var content, entry;\n      return _regeneratorRuntime.async(function getPostById$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return _regeneratorRuntime.awrap(this.fetchPostById(postId));\n\n            case 3:\n              content = _context4.sent;\n              entry = content.items[0];\n              return _context4.abrupt(\"return\", {\n                id: entry.sys.id,\n                title: entry.fields.title,\n                author: {\n                  fullName: entry.fields.author.fields.fullName,\n                  avatar: entry.fields.author.fields.avatar.fields.file.url\n                },\n                description: entry.fields.description,\n                image: entry.fields.image.fields.file.url,\n                publishedAt: entry.fields.publishDate\n              });\n\n            case 8:\n              _context4.prev = 8;\n              _context4.t0 = _context4[\"catch\"](0);\n              // TODO: add error handling\n              console.error(_context4.t0);\n\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, [[0, 8]], Promise);\n    }\n  }]);\n\n  return ContentfulService;\n}();","map":{"version":3,"sources":["C:/Users/M1059011/Desktop/Tasks/modern-web-articles/core/contentful.js"],"names":["createClient","CONTENT_TYPE_POST","CONTENT_TYPE_PERSON","CONTENT_TYPE_BANNER","query","Space","process","env","CONTENTFUL_SPACE_ID","Token","CONTENTFUL_ACCESS_TOKEN","ContentfulService","space","accessToken","sysId","client","createClientInstance","getEntries","content_type","contents","entries","items","map","fields","bannerImage","file","url","console","log","limit","skip","tag","sys","id","title","author","fullName","avatar","description","image","publishedAt","publishDate","total","postId","fetchPostById","content","entry","error"],"mappings":"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","sourcesContent":["import { createClient } from 'contentful';\r\n\r\nexport const CONTENT_TYPE_POST = 'post';\r\nexport const CONTENT_TYPE_PERSON = 'author';\r\nexport const CONTENT_TYPE_BANNER = 'banner';\r\n\r\nconst query = `{\r\n  post {\r\n    items {\r\n      title\r\n    }\r\n  }\r\n}`;\r\nconst Space = process.env.CONTENTFUL_SPACE_ID;\r\nconst Token = process.env.CONTENTFUL_ACCESS_TOKEN;\r\nexport class ContentfulService {\r\n  createClientInstance() {\r\n    return createClient({\r\n      space: Space,\r\n      accessToken: Token\r\n    }); \r\n  }\r\n\r\n  async fetchPostById(sysId) {\r\n    const client = this.createClientInstance();\r\n    return await client.getEntries({\r\n      content_type: CONTENT_TYPE_POST,\r\n      'sys.id': sysId\r\n    });\r\n  }\r\n\r\n  async getBannerEntries() {\r\n    try {\r\n      const client = this.createClientInstance();\r\n      const contents = await client.getEntries({\r\n        content_type: CONTENT_TYPE_BANNER\r\n      });\r\n      const entries = contents.items\r\n        .map(({ fields }) => ({\r\n          bannerImage: fields.bannerImage.fields.file.url\r\n        }));\r\n\r\n      return { entries };\r\n    } catch (error) {\r\n      // TODO: add error handling\r\n      console.log(error);\r\n    }\r\n  }\r\n  // async restFetch(){\r\n  //   fetch(`https://graphql.contentful.com/content/v1/spaces/${Space}`,{\r\n  //     method:\"POST\",\r\n  //     headers : {\r\n  //       \"content-type\":\"application/json\",\r\n  //       authorization:`Bearer ${Token}`\r\n  //     },\r\n  //     body: JSON.stringify({\r\n  //       query\r\n  //     })\r\n  //   }).then(res =>res.json())\r\n  //   .then(response=>{\r\n  //     console.log(response)\r\n  //   })\r\n  // }\r\n  async getPostEntries(\r\n    { limit, skip, tag } = {\r\n      limit: 5,\r\n      skip: 0,\r\n      tag: ''\r\n    }\r\n  ) {\r\n    try {\r\n      const client = this.createClientInstance();\r\n      const contents = await client.getEntries({\r\n        // include: 1,\r\n        // limit,\r\n        // skip,\r\n        // 'sys.id': tag,\r\n        content_type: CONTENT_TYPE_POST,\r\n        // order: 'fields.publishDate',\r\n      });\r\n      const entries = contents.items\r\n        .map(({ sys, fields }) => ({\r\n          id: sys.id,\r\n          title: fields.title,\r\n          author: {\r\n            fullName:fields.author.fields.fullName,\r\n            avatar:fields.author.fields.avatar.fields.file.url\r\n          },\r\n          description: fields.description,\r\n          image: fields.image.fields.file.url,\r\n          publishedAt: fields.publishDate\r\n        }));\r\n\r\n      const total = contents.total;\r\n\r\n      return { entries, total, limit, skip };\r\n    } catch (error) {\r\n      // TODO: add error handling\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  async getPostById(postId) {\r\n    try {\r\n      const content = await this.fetchPostById(postId);\r\n\r\n      const entry = content.items[0];\r\n\r\n      return {\r\n          id: entry.sys.id,\r\n          title: entry.fields.title,\r\n          author: {\r\n            fullName:entry.fields.author.fields.fullName,\r\n            avatar:entry.fields.author.fields.avatar.fields.file.url\r\n          },\r\n          description: entry.fields.description,\r\n          image: entry.fields.image.fields.file.url,\r\n          publishedAt: entry.fields.publishDate\r\n      };\r\n    } catch (error) {\r\n        // TODO: add error handling\r\n      console.error(error);\r\n    }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}